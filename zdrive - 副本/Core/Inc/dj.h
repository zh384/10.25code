#include "stdint.h"
#include "stdbool.h"
#include "can.h"

#define M2006_RATIO 36
#define M3508_RATIO 19.20320855f

#define USE_M2006_NUM 8
#define USE_M3508_NUM 0
#define USE_DJ_NUM (USE_M2006_NUM + USE_M3508_NUM)
#define ZERO_DISTANCE_THRESHOLD 15
#define SETLOCK_MIXDIS_THRESHOLD 10


typedef struct {
	float kp;//???kp?
	float ki;//???ki?
	float kd;//???kd?
	volatile int32_t set_value;//???
	volatile int32_t current_value;//???
	volatile int32_t err;//??:???-???
	volatile int32_t err_last;//?????
	volatile int32_t err_previous;//?????
	volatile int32_t err_delta;//
} PIDtype;

enum motor_mode {//????
	dj_rpm,//????
  dj_position,//????
	dj_zero,  //????
};

typedef struct {//????
	volatile int16_t current_value;//???
	volatile float speed;//??
	volatile float angle;//??
	volatile float real_current_value;//??????
	volatile float real_speed;//?????
	volatile int16_t pulse_read;//??????
	volatile int16_t pulse_distance;//???:????????????
	volatile int pulse_total;//????:?????????????
	volatile float temperature;//????
}djmotorvalue;

typedef struct {//CAN??
	int round_pulse_number;//360????????
	float motor_reduction_ratio;//?????
	float institutional_reduction_ratio;//?????
	uint16_t StdId;
	uint16_t IDE;
	uint16_t RTR;
	uint16_t DLC;
	uint16_t current_limit;
}djmotorparam;

typedef struct {//???
	volatile int32_t pulse_lock;
	volatile uint32_t last_rxtime;
	uint16_t zero_count;//?????
	uint16_t paw_lock_count;
	uint32_t max_distance;
}djmotorcounter;

typedef struct {//??????
	bool rpm_limit_flag;//??????
	bool position_angle_limit_flag;//???????????
	bool position_speed_limit_flag;//???????????
	bool current_limit_flag;//??????
	float max_angle_limit;//??????
	float min_angle_limit;//??????
	int32_t position_max_angle_limit;//???????????
	int16_t zero_max_speed_limit; //???????????
    int16_t zero_max_current_limit;//???????????
	bool is_loose_stuck;//??????
}djmotorlimit;

typedef struct {//????
	bool release_whenstuck_flag;//??????,???????
	bool stuck_detcet_flag;//???????
	bool timeout_detect_flag;//??????
	uint16_t stuck_count;//??????
	uint16_t timeout_count;//??????

}djmotorerror;

typedef struct {
	volatile bool arrive_flag;//
	volatile bool zero_flag;//??????
	volatile bool overtime_flag;//??????
	volatile bool stuck_flag;//????
	volatile bool is_setzero;//??????
}djmotorstatus;

typedef struct {
	uint8_t ID;//????
	volatile bool enable;//????????
	volatile bool begin;//??????
	bool is3508;//?????3508??
	uint8_t mode;//????
	djmotorparam param;//
	djmotorvalue set_value, now_value, previous_value;//????????,???,???????
	djmotorcounter counter;//???
	djmotorlimit limit;//????
	djmotorerror error;//????
	djmotorstatus status_flag;//????
	PIDtype pos_PID, rpm_PID;//pid??
}DJmotor,*djmotorpointer;

extern CAN_RxHeaderTypeDef Rxmsg;
extern DJmotor djmotor[USE_DJ_NUM];
extern uint8_t Rxmessage[8];
extern uint8_t Txmessage[8];

void PID_init(PIDtype* pid, float p, float i,float d, int32_t set);
void djsetzero(djmotorpointer motor);
void djmotor_init(void);
int32_t PID_caculate_data(PIDtype* pid);
void djlockposition(djmotorpointer motor);
void djpositionmode(djmotorpointer motor);
void djspeedmode(djmotorpointer motor);
void djzeromode(djmotorpointer motor);
void djanglecaculate(djmotorpointer motor);
void djreceivedata_can2(CAN_RxHeaderTypeDef rxmsg);
void djcurrenttransmit(djmotorpointer motor, uint8_t i);
void djfunc(void);
